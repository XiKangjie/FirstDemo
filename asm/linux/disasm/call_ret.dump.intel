
call_ret.exe:     file format elf32-i386


Disassembly of section .init:

08048294 <_init>:
 8048294:	53                   	push   ebx
 8048295:	83 ec 08             	sub    esp,0x8
 8048298:	e8 83 00 00 00       	call   8048320 <__x86.get_pc_thunk.bx>
 804829d:	81 c3 63 1d 00 00    	add    ebx,0x1d63
 80482a3:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
 80482a9:	85 c0                	test   eax,eax
 80482ab:	74 05                	je     80482b2 <_init+0x1e>
 80482ad:	e8 1e 00 00 00       	call   80482d0 <__gmon_start__@plt>
 80482b2:	83 c4 08             	add    esp,0x8
 80482b5:	5b                   	pop    ebx
 80482b6:	c3                   	ret    

Disassembly of section .plt:

080482c0 <__gmon_start__@plt-0x10>:
 80482c0:	ff 35 04 a0 04 08    	push   DWORD PTR ds:0x804a004
 80482c6:	ff 25 08 a0 04 08    	jmp    DWORD PTR ds:0x804a008
 80482cc:	00 00                	add    BYTE PTR [eax],al
	...

080482d0 <__gmon_start__@plt>:
 80482d0:	ff 25 0c a0 04 08    	jmp    DWORD PTR ds:0x804a00c
 80482d6:	68 00 00 00 00       	push   0x0
 80482db:	e9 e0 ff ff ff       	jmp    80482c0 <_init+0x2c>

080482e0 <__libc_start_main@plt>:
 80482e0:	ff 25 10 a0 04 08    	jmp    DWORD PTR ds:0x804a010
 80482e6:	68 08 00 00 00       	push   0x8
 80482eb:	e9 d0 ff ff ff       	jmp    80482c0 <_init+0x2c>

Disassembly of section .text:

080482f0 <_start>:
 80482f0:	31 ed                	xor    ebp,ebp
 80482f2:	5e                   	pop    esi
 80482f3:	89 e1                	mov    ecx,esp
 80482f5:	83 e4 f0             	and    esp,0xfffffff0
 80482f8:	50                   	push   eax
 80482f9:	54                   	push   esp
 80482fa:	52                   	push   edx
 80482fb:	68 c0 84 04 08       	push   0x80484c0
 8048300:	68 50 84 04 08       	push   0x8048450
 8048305:	51                   	push   ecx
 8048306:	56                   	push   esi
 8048307:	68 0f 84 04 08       	push   0x804840f
 804830c:	e8 cf ff ff ff       	call   80482e0 <__libc_start_main@plt>
 8048311:	f4                   	hlt    
 8048312:	66 90                	xchg   ax,ax
 8048314:	66 90                	xchg   ax,ax
 8048316:	66 90                	xchg   ax,ax
 8048318:	66 90                	xchg   ax,ax
 804831a:	66 90                	xchg   ax,ax
 804831c:	66 90                	xchg   ax,ax
 804831e:	66 90                	xchg   ax,ax

08048320 <__x86.get_pc_thunk.bx>:
 8048320:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 8048323:	c3                   	ret    
 8048324:	66 90                	xchg   ax,ax
 8048326:	66 90                	xchg   ax,ax
 8048328:	66 90                	xchg   ax,ax
 804832a:	66 90                	xchg   ax,ax
 804832c:	66 90                	xchg   ax,ax
 804832e:	66 90                	xchg   ax,ax

08048330 <deregister_tm_clones>:
 8048330:	b8 1f a0 04 08       	mov    eax,0x804a01f
 8048335:	2d 1c a0 04 08       	sub    eax,0x804a01c
 804833a:	83 f8 06             	cmp    eax,0x6
 804833d:	77 01                	ja     8048340 <deregister_tm_clones+0x10>
 804833f:	c3                   	ret    
 8048340:	b8 00 00 00 00       	mov    eax,0x0
 8048345:	85 c0                	test   eax,eax
 8048347:	74 f6                	je     804833f <deregister_tm_clones+0xf>
 8048349:	55                   	push   ebp
 804834a:	89 e5                	mov    ebp,esp
 804834c:	83 ec 18             	sub    esp,0x18
 804834f:	c7 04 24 1c a0 04 08 	mov    DWORD PTR [esp],0x804a01c
 8048356:	ff d0                	call   eax
 8048358:	c9                   	leave  
 8048359:	c3                   	ret    
 804835a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

08048360 <register_tm_clones>:
 8048360:	b8 1c a0 04 08       	mov    eax,0x804a01c
 8048365:	2d 1c a0 04 08       	sub    eax,0x804a01c
 804836a:	c1 f8 02             	sar    eax,0x2
 804836d:	89 c2                	mov    edx,eax
 804836f:	c1 ea 1f             	shr    edx,0x1f
 8048372:	01 d0                	add    eax,edx
 8048374:	d1 f8                	sar    eax,1
 8048376:	75 01                	jne    8048379 <register_tm_clones+0x19>
 8048378:	c3                   	ret    
 8048379:	ba 00 00 00 00       	mov    edx,0x0
 804837e:	85 d2                	test   edx,edx
 8048380:	74 f6                	je     8048378 <register_tm_clones+0x18>
 8048382:	55                   	push   ebp
 8048383:	89 e5                	mov    ebp,esp
 8048385:	83 ec 18             	sub    esp,0x18
 8048388:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 804838c:	c7 04 24 1c a0 04 08 	mov    DWORD PTR [esp],0x804a01c
 8048393:	ff d2                	call   edx
 8048395:	c9                   	leave  
 8048396:	c3                   	ret    
 8048397:	89 f6                	mov    esi,esi
 8048399:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

080483a0 <__do_global_dtors_aux>:
 80483a0:	80 3d 1c a0 04 08 00 	cmp    BYTE PTR ds:0x804a01c,0x0
 80483a7:	75 13                	jne    80483bc <__do_global_dtors_aux+0x1c>
 80483a9:	55                   	push   ebp
 80483aa:	89 e5                	mov    ebp,esp
 80483ac:	83 ec 08             	sub    esp,0x8
 80483af:	e8 7c ff ff ff       	call   8048330 <deregister_tm_clones>
 80483b4:	c6 05 1c a0 04 08 01 	mov    BYTE PTR ds:0x804a01c,0x1
 80483bb:	c9                   	leave  
 80483bc:	f3 c3                	repz ret 
 80483be:	66 90                	xchg   ax,ax

080483c0 <frame_dummy>:
 80483c0:	a1 10 9f 04 08       	mov    eax,ds:0x8049f10
 80483c5:	85 c0                	test   eax,eax
 80483c7:	74 1f                	je     80483e8 <frame_dummy+0x28>
 80483c9:	b8 00 00 00 00       	mov    eax,0x0
 80483ce:	85 c0                	test   eax,eax
 80483d0:	74 16                	je     80483e8 <frame_dummy+0x28>
 80483d2:	55                   	push   ebp
 80483d3:	89 e5                	mov    ebp,esp
 80483d5:	83 ec 18             	sub    esp,0x18
 80483d8:	c7 04 24 10 9f 04 08 	mov    DWORD PTR [esp],0x8049f10
 80483df:	ff d0                	call   eax
 80483e1:	c9                   	leave  
 80483e2:	e9 79 ff ff ff       	jmp    8048360 <register_tm_clones>
 80483e7:	90                   	nop
 80483e8:	e9 73 ff ff ff       	jmp    8048360 <register_tm_clones>

080483ed <_Z4add3iii>:
int add3(int a, int b, int c)
{
 80483ed:	55                   	push   ebp
 80483ee:	89 e5                	mov    ebp,esp
 80483f0:	83 ec 10             	sub    esp,0x10
    int ret = 0;
 80483f3:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    ret = a + b + c;
 80483fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
 80483fd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
 8048400:	01 c2                	add    edx,eax
 8048402:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
 8048405:	01 d0                	add    eax,edx
 8048407:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
    return ret;
 804840a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
}
 804840d:	c9                   	leave  
 804840e:	c3                   	ret    

0804840f <main>:

int main()
{
 804840f:	55                   	push   ebp
 8048410:	89 e5                	mov    ebp,esp
 8048412:	83 ec 1c             	sub    esp,0x1c
    int sum = 0;
 8048415:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    sum = add3(1, 2, 3);
 804841c:	c7 44 24 08 03 00 00 	mov    DWORD PTR [esp+0x8],0x3
 8048423:	00 
 8048424:	c7 44 24 04 02 00 00 	mov    DWORD PTR [esp+0x4],0x2
 804842b:	00 
 804842c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
 8048433:	e8 b5 ff ff ff       	call   80483ed <_Z4add3iii>
 8048438:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax

    return 0;
 804843b:	b8 00 00 00 00       	mov    eax,0x0
}
 8048440:	c9                   	leave  
 8048441:	c3                   	ret    
 8048442:	66 90                	xchg   ax,ax
 8048444:	66 90                	xchg   ax,ax
 8048446:	66 90                	xchg   ax,ax
 8048448:	66 90                	xchg   ax,ax
 804844a:	66 90                	xchg   ax,ax
 804844c:	66 90                	xchg   ax,ax
 804844e:	66 90                	xchg   ax,ax

08048450 <__libc_csu_init>:
 8048450:	55                   	push   ebp
 8048451:	57                   	push   edi
 8048452:	31 ff                	xor    edi,edi
 8048454:	56                   	push   esi
 8048455:	53                   	push   ebx
 8048456:	e8 c5 fe ff ff       	call   8048320 <__x86.get_pc_thunk.bx>
 804845b:	81 c3 a5 1b 00 00    	add    ebx,0x1ba5
 8048461:	83 ec 1c             	sub    esp,0x1c
 8048464:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
 8048468:	8d b3 0c ff ff ff    	lea    esi,[ebx-0xf4]
 804846e:	e8 21 fe ff ff       	call   8048294 <_init>
 8048473:	8d 83 08 ff ff ff    	lea    eax,[ebx-0xf8]
 8048479:	29 c6                	sub    esi,eax
 804847b:	c1 fe 02             	sar    esi,0x2
 804847e:	85 f6                	test   esi,esi
 8048480:	74 27                	je     80484a9 <__libc_csu_init+0x59>
 8048482:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
 8048488:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
 804848c:	89 2c 24             	mov    DWORD PTR [esp],ebp
 804848f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 8048493:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 8048497:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 804849b:	ff 94 bb 08 ff ff ff 	call   DWORD PTR [ebx+edi*4-0xf8]
 80484a2:	83 c7 01             	add    edi,0x1
 80484a5:	39 f7                	cmp    edi,esi
 80484a7:	75 df                	jne    8048488 <__libc_csu_init+0x38>
 80484a9:	83 c4 1c             	add    esp,0x1c
 80484ac:	5b                   	pop    ebx
 80484ad:	5e                   	pop    esi
 80484ae:	5f                   	pop    edi
 80484af:	5d                   	pop    ebp
 80484b0:	c3                   	ret    
 80484b1:	eb 0d                	jmp    80484c0 <__libc_csu_fini>
 80484b3:	90                   	nop
 80484b4:	90                   	nop
 80484b5:	90                   	nop
 80484b6:	90                   	nop
 80484b7:	90                   	nop
 80484b8:	90                   	nop
 80484b9:	90                   	nop
 80484ba:	90                   	nop
 80484bb:	90                   	nop
 80484bc:	90                   	nop
 80484bd:	90                   	nop
 80484be:	90                   	nop
 80484bf:	90                   	nop

080484c0 <__libc_csu_fini>:
 80484c0:	f3 c3                	repz ret 

Disassembly of section .fini:

080484c4 <_fini>:
 80484c4:	53                   	push   ebx
 80484c5:	83 ec 08             	sub    esp,0x8
 80484c8:	e8 53 fe ff ff       	call   8048320 <__x86.get_pc_thunk.bx>
 80484cd:	81 c3 33 1b 00 00    	add    ebx,0x1b33
 80484d3:	83 c4 08             	add    esp,0x8
 80484d6:	5b                   	pop    ebx
 80484d7:	c3                   	ret    
